{:rename-macros {}, :renames {}, :use-macros {go cljs.core.async.macros}, :excludes #{}, :name cljs-reaction.login-form, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core, cljs.core.async cljs.core.async, mytextfield cljs-reaction.text-field, cljs-reaction.text-field cljs-reaction.text-field, mypassword cljs-reaction.password-field, cljs-reaction.password-field cljs-reaction.password-field}, :uses {<! cljs.core.async, chan cljs.core.async, text-field cljs-reaction.text-field, password-field cljs-reaction.password-field, put! cljs.core.async}, :defs {login-form {:protocol-inline nil, :meta {:file "/home/douglas/projects/cljs-reaction/src/cljs_reaction/login-form.cljs", :line 8, :column 7, :end-line 8, :end-column 17, :arglists (quote ([*title* *user-text* *user-placeholder* *password-text* *password-placeholder*]))}, :name cljs-reaction.login-form/login-form, :variadic false, :file "src/cljs_reaction/login-form.cljs", :end-column 17, :method-params ([*title* *user-text* *user-placeholder* *password-text* *password-placeholder*]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 5, :fn-var true, :arglists (quote ([*title* *user-text* *user-placeholder* *password-text* *password-placeholder*]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:div :class :h2}, :order [:div :class :h2]}, :doc nil}